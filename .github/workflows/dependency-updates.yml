name: Dependency Updates

on:
  schedule:
    # Exécute tous les lundis à 9h00 UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Permet l'exécution manuelle

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    outputs:
      updates_available: ${{ steps.check-updates.outputs.updates_available }}
      packages: ${{ steps.matrix.outputs.packages }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for dependency updates
        id: check-updates
        run: |
          # Vérifier les mises à jour disponibles
          npx npm-check-updates --jsonUpgraded > updates.json || echo "{}" > updates.json
          
          # Compter le nombre de mises à jour
          UPDATES_COUNT=$(cat updates.json | jq '. | length')
          echo "updates_count=$UPDATES_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$UPDATES_COUNT" -gt 0 ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            # Créer une liste des packages à mettre à jour (limité à 10 pour éviter trop de PR)
            cat updates.json | jq -r 'keys[]' | head -10 > packages_list.txt
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Process packages and create matrix
        if: steps.check-updates.outputs.updates_available == 'true'
        id: matrix
        run: |
          # Créer un matrix JSON pour les packages
          PACKAGES=$(cat packages_list.txt | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  create-individual-prs:
    needs: update-dependencies
    if: needs.update-dependencies.outputs.updates_available == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.update-dependencies.outputs.packages) }}
      max-parallel: 3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get package versions
        id: versions
        run: |
          # Vérifier les mises à jour disponibles
          npx npm-check-updates --jsonUpgraded > updates.json
          
          current_version=$(cat updates.json | jq -r --arg pkg "${{ matrix.package }}" '.[$pkg]' | sed 's/[\^~]//g')
          old_version=$(jq -r --arg pkg "${{ matrix.package }}" '.dependencies["${{ matrix.package }}"] // .devDependencies["${{ matrix.package }}"]' package.json | sed 's/[\^~]//g')
          
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "old_version=$old_version" >> $GITHUB_OUTPUT

      - name: Update single package
        run: |
          # Mettre à jour seulement ce package
          npx npm-check-updates -u "${{ matrix.package }}"
          npm install --legacy-peer-deps

      - name: Test package update
        id: test
        run: |
          build_result="✅ Succès"
          lint_result="✅ Succès"
          
          npm run build > /dev/null 2>&1 || build_result="❌ Échec"
          npm run lint > /dev/null 2>&1 || lint_result="❌ Échec"
          
          echo "build_result=$build_result" >> $GITHUB_OUTPUT
          echo "lint_result=$lint_result" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update ${{ matrix.package }} to ${{ steps.versions.outputs.current_version }}'
          title: '🔄 Update ${{ matrix.package }} to ${{ steps.versions.outputs.current_version }}'
          body: |
            ## 📦 Mise à jour de `${{ matrix.package }}`
            
            **Version:** `${{ steps.versions.outputs.old_version }}` → `${{ steps.versions.outputs.current_version }}`
            
            ### 🧪 Tests automatiques:
            - **Build:** ${{ steps.test.outputs.build_result }}
            - **Lint:** ${{ steps.test.outputs.lint_result }}
            
            ### 📋 À vérifier manuellement:
            - [ ] Tests unitaires et d'intégration
            - [ ] Fonctionnalités utilisant ce package
            - [ ] Pas de breaking changes
            
            ### 📚 Changelog:
            Consultez le changelog du package pour plus de détails sur les changements.
            
            ---
            
            🤖 PR générée automatiquement par GitHub Actions.
          branch: update-${{ matrix.package }}-to-${{ steps.versions.outputs.current_version }}
          delete-branch: true
          labels: |
            dependencies
            automated
            individual-update

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Échec de la mise à jour des dépendances',
              body: '## Problème détecté\n\nLa mise à jour automatique des dépendances a échoué.\n\n**Action requise:** Vérifiez manuellement les dépendances et corrigez les conflits éventuels.\n\n**Workflow:** ' + context.workflow + '\n**Run ID:** ' + context.runId,
              labels: ['bug', 'dependencies', 'needs-attention']
            });